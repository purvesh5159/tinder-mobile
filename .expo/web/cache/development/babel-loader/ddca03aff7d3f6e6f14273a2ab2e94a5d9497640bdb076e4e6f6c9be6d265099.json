{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Swiper from 'react-native-deck-swiper';\nimport PersonCard from \"../molecules/PersonCard\";\nimport { usePeople } from \"../../hooks/usePeople\";\nimport { likePerson, dislikePerson } from \"../../hooks/useSwipe\";\nimport { useRecoilValue } from 'recoil';\nimport { currentUserIdAtom } from \"../../atoms/userAtom\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function SwipeDeck() {\n  var userId = useRecoilValue(currentUserIdAtom);\n  var swipeRef = useRef(null);\n  var _usePeople = usePeople({\n      per_page: 30\n    }),\n    data = _usePeople.data,\n    isLoading = _usePeople.isLoading;\n  if (isLoading) return _jsx(ActivityIndicator, {\n    style: {\n      marginTop: 40\n    }\n  });\n  var people = data && data.data ? data.data : [];\n  var handleSwipe = function () {\n    var _ref = _asyncToGenerator(function* (idx, type) {\n      var target = people[idx];\n      if (!target) return;\n      try {\n        if (type === 'right') yield likePerson({\n          user_id: userId,\n          target_id: target.id\n        });else yield dislikePerson({\n          user_id: userId,\n          target_id: target.id\n        });\n      } catch (e) {\n        console.warn('Swipe API error', e.response ? e.response.data : e.message);\n      }\n    });\n    return function handleSwipe(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Swiper, {\n      ref: swipeRef,\n      cards: people,\n      cardIndex: 0,\n      renderCard: function renderCard(card) {\n        return _jsx(PersonCard, {\n          person: card\n        });\n      },\n      stackSize: 3,\n      verticalSwipe: false,\n      onSwipedLeft: function onSwipedLeft(i) {\n        return handleSwipe(i, 'left');\n      },\n      onSwipedRight: function onSwipedRight(i) {\n        return handleSwipe(i, 'right');\n      },\n      overlayLabels: {\n        left: {\n          title: 'NOPE',\n          style: {\n            label: {\n              backgroundColor: 'red',\n              color: 'white',\n              fontSize: 24\n            }\n          }\n        },\n        right: {\n          title: 'LIKE',\n          style: {\n            label: {\n              backgroundColor: 'green',\n              color: 'white',\n              fontSize: 24\n            }\n          }\n        }\n      },\n      animateCardOpacity: true\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["React","useRef","View","ActivityIndicator","StyleSheet","Swiper","PersonCard","usePeople","likePerson","dislikePerson","useRecoilValue","currentUserIdAtom","jsx","_jsx","SwipeDeck","userId","swipeRef","_usePeople","per_page","data","isLoading","style","marginTop","people","handleSwipe","_ref","_asyncToGenerator","idx","type","target","user_id","target_id","id","e","console","warn","response","message","_x","_x2","apply","arguments","styles","container","children","ref","cards","cardIndex","renderCard","card","person","stackSize","verticalSwipe","onSwipedLeft","i","onSwipedRight","overlayLabels","left","title","label","backgroundColor","color","fontSize","right","animateCardOpacity","create","flex","alignItems","justifyContent"],"sources":["D:/xamp/htdocs/tinder-mobile/src/components/organisms/SwipeDeck.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport { View, ActivityIndicator, StyleSheet } from 'react-native';\nimport Swiper from 'react-native-deck-swiper';\nimport PersonCard from '../molecules/PersonCard';\nimport { usePeople } from '../../hooks/usePeople';\nimport { likePerson, dislikePerson } from '../../hooks/useSwipe';\nimport { useRecoilValue } from 'recoil';\nimport { currentUserIdAtom } from '../../atoms/userAtom';\n\nexport default function SwipeDeck() {\n  const userId = useRecoilValue(currentUserIdAtom);\n  const swipeRef = useRef(null);\n  const { data, isLoading } = usePeople({ per_page: 30 });\n\n  if (isLoading) return <ActivityIndicator style={{marginTop:40}} />;\n\n  const people = data && data.data ? data.data : [];\n\n  const handleSwipe = async (idx, type) => {\n    const target = people[idx];\n    if (!target) return;\n    try {\n      if (type === 'right') await likePerson({ user_id: userId, target_id: target.id });\n      else await dislikePerson({ user_id: userId, target_id: target.id });\n    } catch (e) {\n      console.warn('Swipe API error', e.response ? e.response.data : e.message);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Swiper\n        ref={swipeRef}\n        cards={people}\n        cardIndex={0}\n        renderCard={(card) => <PersonCard person={card} />}\n        stackSize={3}\n        verticalSwipe={false}\n        onSwipedLeft={(i) => handleSwipe(i, 'left')}\n        onSwipedRight={(i) => handleSwipe(i, 'right')}\n        overlayLabels={{\n          left: { title: 'NOPE', style: { label: { backgroundColor: 'red', color: 'white', fontSize: 24 } }},\n          right: { title: 'LIKE', style: { label: { backgroundColor: 'green', color: 'white', fontSize: 24 } }}\n        }}\n        animateCardOpacity\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({ container:{flex:1, alignItems:'center', justifyContent:'center'} });\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}