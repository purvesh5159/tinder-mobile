{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useQuery } from '@tanstack/react-query';\nimport client from \"../api/client\";\nvar fetchPeople = function () {\n  var _ref2 = _asyncToGenerator(function* (_ref) {\n    var queryKey = _ref.queryKey;\n    var _queryKey = _slicedToArray(queryKey, 2),\n      params = _queryKey[1];\n    var res = yield client.get('/people', {\n      params: params\n    });\n    var transformedData = res.data.data.map(function (person) {\n      return _objectSpread(_objectSpread({}, person), {}, {\n        photos: person.photo ? [person.photo] : []\n      });\n    });\n    return _objectSpread(_objectSpread({}, res.data), {}, {\n      data: transformedData\n    });\n  });\n  return function fetchPeople(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport function usePeople() {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref3$per_page = _ref3.per_page,\n    per_page = _ref3$per_page === void 0 ? 20 : _ref3$per_page;\n  return useQuery(['people', {\n    per_page: per_page\n  }], fetchPeople);\n}","map":{"version":3,"names":["useQuery","client","fetchPeople","_ref2","_asyncToGenerator","_ref","queryKey","_queryKey","_slicedToArray","params","res","get","transformedData","data","map","person","_objectSpread","photos","photo","_x","apply","arguments","usePeople","_ref3","length","undefined","_ref3$per_page","per_page"],"sources":["D:/xamp/htdocs/tinder-mobile/src/hooks/usePeople.js"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport client from '../api/client';\n\n// Fetch function with data transformation\nconst fetchPeople = async ({ queryKey }) => {\n  const [, params] = queryKey;\n  const res = await client.get('/people', { params });\n\n  // Transform each person to have photos array instead of a single photo object\n  const transformedData = res.data.data.map(person => ({\n    ...person,\n    photos: person.photo ? [person.photo] : [],\n  }));\n\n  return {\n    ...res.data,\n    data: transformedData,\n  };\n};\n\n// Hook to use people data\nexport function usePeople({ per_page = 20 } = {}) {\n  return useQuery(['people', { per_page }], fetchPeople);\n}\n"],"mappings":";;;;;AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,OAAOC,MAAM;AAGb,IAAMC,WAAW;EAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,WAAAC,IAAA,EAAwB;IAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACnC,IAAAC,SAAA,GAAAC,cAAA,CAAmBF,QAAQ;MAAlBG,MAAM,GAAAF,SAAA;IACf,IAAMG,GAAG,SAAST,MAAM,CAACU,GAAG,CAAC,SAAS,EAAE;MAAEF,MAAM,EAANA;IAAO,CAAC,CAAC;IAGnD,IAAMG,eAAe,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,UAAAC,MAAM;MAAA,OAAAC,aAAA,CAAAA,aAAA,KAC3CD,MAAM;QACTE,MAAM,EAAEF,MAAM,CAACG,KAAK,GAAG,CAACH,MAAM,CAACG,KAAK,CAAC,GAAG;MAAE;IAAA,CAC1C,CAAC;IAEH,OAAAF,aAAA,CAAAA,aAAA,KACKN,GAAG,CAACG,IAAI;MACXA,IAAI,EAAED;IAAe;EAEzB,CAAC;EAAA,gBAdKV,WAAWA,CAAAiB,EAAA;IAAA,OAAAhB,KAAA,CAAAiB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAchB;AAGD,OAAO,SAASC,SAASA,CAAA,EAAyB;EAAA,IAAAC,KAAA,GAAAF,SAAA,CAAAG,MAAA,QAAAH,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAJ,CAAC,CAAC;IAAAK,cAAA,GAAAH,KAAA,CAApBI,QAAQ;IAARA,QAAQ,GAAAD,cAAA,cAAG,EAAE,GAAAA,cAAA;EACvC,OAAO1B,QAAQ,CAAC,CAAC,QAAQ,EAAE;IAAE2B,QAAQ,EAARA;EAAS,CAAC,CAAC,EAAEzB,WAAW,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}