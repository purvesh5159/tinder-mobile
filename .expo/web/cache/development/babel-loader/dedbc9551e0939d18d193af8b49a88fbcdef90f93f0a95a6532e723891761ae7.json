{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useRef, forwardRef, useImperativeHandle } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Swiper from 'react-native-deck-swiper';\nimport PersonCard from \"../molecules/PersonCard\";\nimport { usePeople } from \"../../hooks/usePeople\";\nimport { likePerson, dislikePerson } from \"../../hooks/useSwipe\";\nimport { useRecoilValue } from 'recoil';\nimport { currentUserIdAtom } from \"../../atoms/userAtom\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar SwipeDeck = forwardRef(function (props, ref) {\n  var _data$data;\n  var userId = useRecoilValue(currentUserIdAtom);\n  var swipeRef = useRef(null);\n  var _usePeople = usePeople({\n      per_page: 30\n    }),\n    data = _usePeople.data,\n    isLoading = _usePeople.isLoading;\n  useImperativeHandle(ref, function () {\n    return {\n      swipeLeft: function swipeLeft() {\n        var _swipeRef$current;\n        return (_swipeRef$current = swipeRef.current) == null ? void 0 : _swipeRef$current.swipeLeft();\n      },\n      swipeRight: function swipeRight() {\n        var _swipeRef$current2;\n        return (_swipeRef$current2 = swipeRef.current) == null ? void 0 : _swipeRef$current2.swipeRight();\n      }\n    };\n  });\n  var people = (_data$data = data == null ? void 0 : data.data) != null ? _data$data : [];\n  var handleSwipe = function () {\n    var _ref = _asyncToGenerator(function* (idx, type) {\n      var target = people[idx];\n      if (!target) return;\n      try {\n        if (type === 'right') {\n          yield likePerson({\n            user_id: userId,\n            target_id: target.id\n          });\n        } else {\n          yield dislikePerson({\n            user_id: userId,\n            target_id: target.id\n          });\n        }\n      } catch (e) {\n        var _e$response;\n        console.warn('Swipe API error', ((_e$response = e.response) == null ? void 0 : _e$response.data) || e.message);\n      }\n    });\n    return function handleSwipe(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  if (isLoading) return _jsx(ActivityIndicator, {\n    style: {\n      marginTop: 20\n    }\n  });\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Swiper, {\n      ref: swipeRef,\n      cards: people,\n      cardIndex: 0,\n      renderCard: function renderCard(card) {\n        return _jsx(PersonCard, {\n          person: card\n        });\n      },\n      stackSize: 3,\n      verticalSwipe: false,\n      onSwipedLeft: function onSwipedLeft(i) {\n        return handleSwipe(i, 'left');\n      },\n      onSwipedRight: function onSwipedRight(i) {\n        return handleSwipe(i, 'right');\n      },\n      overlayLabels: {\n        left: {\n          title: 'NOPE',\n          style: {\n            label: {\n              backgroundColor: 'red',\n              color: 'white',\n              fontSize: 24\n            }\n          }\n        },\n        right: {\n          title: 'LIKE',\n          style: {\n            label: {\n              backgroundColor: 'green',\n              color: 'white',\n              fontSize: 24\n            }\n          }\n        }\n      },\n      animateCardOpacity: true\n    })\n  });\n});\nexport default SwipeDeck;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["React","useRef","forwardRef","useImperativeHandle","View","ActivityIndicator","StyleSheet","Swiper","PersonCard","usePeople","likePerson","dislikePerson","useRecoilValue","currentUserIdAtom","jsx","_jsx","SwipeDeck","props","ref","_data$data","userId","swipeRef","_usePeople","per_page","data","isLoading","swipeLeft","_swipeRef$current","current","swipeRight","_swipeRef$current2","people","handleSwipe","_ref","_asyncToGenerator","idx","type","target","user_id","target_id","id","e","_e$response","console","warn","response","message","_x","_x2","apply","arguments","style","marginTop","styles","container","children","cards","cardIndex","renderCard","card","person","stackSize","verticalSwipe","onSwipedLeft","i","onSwipedRight","overlayLabels","left","title","label","backgroundColor","color","fontSize","right","animateCardOpacity","create","flex","alignItems","justifyContent"],"sources":["D:/xamp/htdocs/tinder-mobile/src/components/organisms/SwipeDeck.js"],"sourcesContent":["import React, { useRef, forwardRef, useImperativeHandle } from 'react';\nimport { View, ActivityIndicator, StyleSheet } from 'react-native';\nimport Swiper from 'react-native-deck-swiper';\nimport PersonCard from '../molecules/PersonCard';\nimport { usePeople } from '../../hooks/usePeople';\nimport { likePerson, dislikePerson } from '../../hooks/useSwipe';\nimport { useRecoilValue } from 'recoil';\nimport { currentUserIdAtom } from '../../atoms/userAtom';\n\nconst SwipeDeck = forwardRef((props, ref) => {\n  const userId = useRecoilValue(currentUserIdAtom);\n  const swipeRef = useRef(null);\n  const { data, isLoading } = usePeople({ per_page: 30 });\n\n  // âœ… Always call hooks before any returns\n  useImperativeHandle(ref, () => ({\n    swipeLeft: () => swipeRef.current?.swipeLeft(),\n    swipeRight: () => swipeRef.current?.swipeRight(),\n  }));\n\n  const people = data?.data ?? [];\n\n  const handleSwipe = async (idx, type) => {\n    const target = people[idx];\n    if (!target) return;\n    try {\n      if (type === 'right') {\n        await likePerson({ user_id: userId, target_id: target.id });\n      } else {\n        await dislikePerson({ user_id: userId, target_id: target.id });\n      }\n    } catch (e) {\n      console.warn('Swipe API error', e.response?.data || e.message);\n    }\n  };\n\n  // ðŸ§¨ Moved below all hooks\n  if (isLoading) return <ActivityIndicator style={{ marginTop: 20 }} />;\n\n  return (\n    <View style={styles.container}>\n      <Swiper\n        ref={swipeRef}\n        cards={people}\n        cardIndex={0}\n        renderCard={(card) => <PersonCard person={card} />}\n        stackSize={3}\n        verticalSwipe={false}\n        onSwipedLeft={(i) => handleSwipe(i, 'left')}\n        onSwipedRight={(i) => handleSwipe(i, 'right')}\n        overlayLabels={{\n          left: {\n            title: 'NOPE',\n            style: {\n              label: {\n                backgroundColor: 'red',\n                color: 'white',\n                fontSize: 24,\n              },\n            },\n          },\n          right: {\n            title: 'LIKE',\n            style: {\n              label: {\n                backgroundColor: 'green',\n                color: 'white',\n                fontSize: 24,\n              },\n            },\n          },\n        }}\n        animateCardOpacity\n      />\n    </View>\n  );\n});\n\nexport default SwipeDeck;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}